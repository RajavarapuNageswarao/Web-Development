Push	         Adds one or more elements to the end of an array.		                                     arr.push(1, 2, 3)	
Pop	             Removes the last element from an array.		                                             arr.pop()	
Shift	         Removes the first element from an array.		                                             arr.shift()	
Unshift	         Adds one or more elements to the beginning of an array.		                             arr.unshift(1, 2, 3)	
Splice	         Adds or removes elements from an array.		                                             arr.splice(1, 2, 4, 5)	
Slice	         Returns a shallow copy of a portion of an array./ Creates a new array of existing array.	 arr.slice(1, 3)	    
Concat	         Combines two or more arrays / creates a new array of existing array.		                 arr.concat([1][2][3])	
Join	         Converts an array to a string / creates a new string existing of a string.		             arr.join(", ")	
ToString	     Converts an array to a string.		                                                         arr.toString()	
IndexOf	         Returns the index of the first occurrence of a specified value.	                         arr.indexOf(searchElement[, fromIndex]) arr.indexOf(1)	
LastIndexOf	     Returns the index of the last occurrence of a specified value.		                         arr.lastIndexOf(1)	
Includes	     Checks if an array includes a specified value.	                                             arr.includes(valueToFind[, fromIndex]);	arr.includes(1)	
Find	         Returns the first element in an array that satisfies a given condition.	                 arr.find(callback(element[, index[, array]])[, thisArg])	arr.find(x => x > 1)		
Some	         Checks if at least one element in an array satisfies a given condition.		             arr.some(x => x > 1)		
Every	         Checks if all elements in an array satisfy a given condition.		                         arr.every(x => x > 1)		
Filter	         Creates a new array with all elements that satisfy a given condition.	                     let newArray = arr.filter(callback(currentValue[, index[, array]]) {}[, thisarg])	arr.filter(x => x > 1)		
Map	             Creates a new array by applying a function to each element.		                         arr.map(x => x * 2)	
ForEach	         Calls a function for each element in an array.		                                         arr.forEach(x => console.log(x))	    
Reduce	         Applies a function to each element in an array, reducing it to a single value.              arr.reduce((a, b) => a + b, 0)	        
Reduce           Right	Applies a function to each element in an array,                                      arr.reduceRight((a, b) => a + b, 0)			
Flat	         Flattens an array.		                                                                     arr.flat()	                            
At	             Returns the element at the specified position in an array.		                             arr.at(1)	                           
filter	         array.filter(callback(element, index, array), thisValue) ===>return use mandatory.
reduce	         array.reduce(callback(accumulator, currentValue, currentIndex, array), initialValue)
reduceRight	     array.reduceRight(callback(accumulator, currentValue, currentIndex, array), initialValue)
fill	         array.fill(value, start, end)
find	         array.find(callback(element, index, array), thisValue)
indexOf	         array.indexOf(searchElement, fromIndex)
lastIndexOf	     array.lastIndexOf(searchElement, fromIndex)
findIndex	     array.findIndex(callback(element, index, array), thisValue)
includes	     array.includes(searchElement, fromIndex)
pop	             array.pop()
push	         array.push(element1, ..., elementN)
shift	         array.shift()
unshift	         array.unshift(element1, ..., elementN)
splice	         array.splice(start, deleteCount, item1, ..., itemN)
slice	         array.slice(begin, end)
join	         array.join(separator)
reverse	         array.reverse()
sort	         array.sort(compareFunction)
some	         array.some(callback(element, index, array), thisValue)
every	         array.every(callback(element, index, array), thisValue)
from	         Array.from(arrayLike, mapFn, thisArg)
of	             Array.of(element0, element1, ..., elementN)
isArray	         Array.isArray(obj)
at	             array.at(index)
copyWithin	     array.copyWithin(target, start, end)
flat	         array.flat(depth)
flatMap	         array.flatMap(callback(currentValue, index, array), thisArg)
